<#@ template language="C#" debug="false" hostspecific="true"#>
<#@ include file="EF.Utility.CS.ttinclude"#>
<#@ import namespace="System.IO" #>
<#@ output extension=".cs"#>
<#
string inputFile = @"Entity.edmx";
EdmItemCollection itemCollection = new MetadataLoader(this).CreateEdmItemCollection(inputFile);
List<string> components = new List<string>();
string appCodePath = Host.ResolvePath("").Substring(0, Host.ResolvePath("").IndexOf("App_Code\\") + "App_Code\\".Length);
foreach (EntityType entity in itemCollection.GetItems<EntityType>().OrderBy(e => e.Name))
{
	EditClassTemplate(entity);
	if (entity.Documentation != null && entity.Documentation.Summary != null)
	{		
		if (!components.Contains(entity.Documentation.Summary))
			components.Add(entity.Documentation.Summary);
		string folderPath = appCodePath + "Classes\\" + entity.Documentation.Summary + "\\";

		if(!Directory.Exists(folderPath))
			Directory.CreateDirectory(folderPath);
		if(File.Exists(appCodePath + "Classes\\GIVE-ME-A-COMPONENT-NAME-" + entity.Name + ".cs"))
			File.Delete(appCodePath + "Classes\\GIVE-ME-A-COMPONENT-NAME-" + entity.Name + ".cs");
		SaveOutput(folderPath + "\\" + entity.Name + ".generated.cs");
	}
	else
		SaveOutput(appCodePath + "Classes\\GIVE-ME-A-COMPONENT-NAME-" + entity.Name + ".cs");
}
foreach (string component in components){
	SettingsTemplate(component);
	string folderPath = appCodePath + "Classes\\" + component + "\\";
	SaveOutput(folderPath + "\\" + component + "Settings.generated.cs");
}
#>
<#+
void SaveOutput(string outputFileName)
{
	File.WriteAllText(outputFileName, this.GenerationEnvironment.ToString());
	this.GenerationEnvironment.Remove(0, this.GenerationEnvironment.Length);
}
void EditClassTemplate(EntityType entity)
{
#>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using BaseCode;

namespace Classes.<#=GetComponentName(entity) #>
{
	public partial class <#=entity.Name#> : BaseGeneratedClass
	{
		protected const string cacheKeyPrefix = "<#=GetComponentName(entity) #>_<#=entity.Name#>_";

		protected static List<string> m_LikeSearchProperties { get { return new List<string> { <#=GenerateLikeFilters(entity)#>}; } }

		public static readonly ICacheProvider Cache = new AspDotNetCacheProvider(new HttpContextWrapper(HttpContext.Current), Settings.EnableCaching, Settings.CacheDuration);
<#+
		var propertiesWithDefaultValues = entity.Properties.Where(p => p.TypeUsage.EdmType is PrimitiveType && p.DeclaringType == entity && p.DefaultValue != null);
		var collectionNavigationProperties = entity.NavigationProperties.Where(np => np.DeclaringType == entity && np.ToEndMember.RelationshipMultiplicity == RelationshipMultiplicity.Many);
		var complexProperties = entity.Properties.Where(p => p.TypeUsage.EdmType is ComplexType && p.DeclaringType == entity);
		if (!propertiesWithDefaultValues.Any() && !collectionNavigationProperties.Any() && !complexProperties.Any())
		{
	#>

		public <#=entity.Name#>()
		{
		}

<#+} #>
		public <#=entity.Name#>(<#=entity.Name#> objectToCopy)
		{
<#=GetPropertiesForConstructor(entity)#>
		}

		public virtual bool IsNewRecord
		{
			get { return <#=entity.KeyMembers[0].TypeUsage.EdmType.Name == "Guid" ? entity.KeyMembers[0].Name + " == Guid.Empty" : entity.KeyMembers[0].Name + " < 1" #>; }
		}
<#=GenerateClientTimeDateProperties(entity)#>
		public virtual void Save()
		{
			SaveEntity("<#=entity.Name#>", this);
			ClearCache();
			ClearRelatedCacheItems();
			SaveSearch();
		}

		public virtual void Delete()
		{
			DeleteSEO();
			DeleteSearch();
			using (Entities entity = new Entities())
			{
				entity.Entry(this).State = System.Data.EntityState.Deleted;
				entity.SaveChanges();
			}
			ClearCache();
			ClearRelatedCacheItems();
		}

		public static <#=entity.Name#> GetByID(<#=entity.KeyMembers[0].TypeUsage.EdmType.Name == "Guid" ? "Guid" : "int" #> <#=entity.KeyMembers[0].Name#>, IEnumerable<string> includeList = null)
		{
			<#=entity.Name#> obj = null;
			string key = cacheKeyPrefix + <#=entity.KeyMembers[0].Name#> + GetCacheIncludeText(includeList);

			<#=entity.Name#> tmpClass = null;

			if (Cache.IsEnabled)
			{
				if (Cache.IsEmptyCacheItem(key))
					return null;
				tmpClass = Cache[key] as <#=entity.Name#>;
			}

			if (tmpClass != null)
				obj = tmpClass;
			else
			{
				using (Entities entity = new Entities())
				{
					IQueryable<<#=entity.Name#>> itemQuery = AddIncludes(entity.<#=entity.Name#>, includeList);
					obj = itemQuery.FirstOrDefault(n => n.<#=entity.KeyMembers[0].Name#> == <#=entity.KeyMembers[0].Name#>);
				}
				Cache.Store(key, obj);
			}

			return obj;
		}

		public static List<<#=entity.Name#>> GetAll(IEnumerable<string> includeList = null)
		{
			List<<#=entity.Name#>> objects;
			string key = cacheKeyPrefix + "GetAll" + GetCacheIncludeText(includeList);

			List<<#=entity.Name#>> tmpList = null;

			if (Cache.IsEnabled)
			{
				if (Cache.IsEmptyCacheItem(key))
					return new List<<#=entity.Name#>>();
				tmpList = Cache[key] as List<<#=entity.Name#>>;
			}

			if (tmpList != null)
				objects = tmpList;
			else
			{
				using (Entities entity = new Entities())
				{
					IQueryable<<#=entity.Name#>> itemQuery = AddIncludes(entity.<#=entity.Name#>, includeList);
					objects = itemQuery.ToList();
				}
				Cache.Store(key, objects);
			}

			return objects;
		}
<#=GetFilterPropertySpecificGetBy(entity)#>
		/// <summary>
		/// The total number of records that will be displayed in the grid
		/// </summary>
		/// <returns></returns>
		public static int SelectCount()
		{
			//return the itemcount that was set when the records were retrieved
			return m_ItemCount;
		}

		public static int SelectCount(string searchText, string sortField, bool sortDirection)
		{
			return SelectCount();
		}

		public static int SelectCount(string searchText, string sortField, bool sortDirection, Filters filterList)
		{
			return SelectCount();
		}


		public static int SelectCount(string searchText, string sortField, bool sortDirection, Filters filterList, IEnumerable<string> includeList)
		{
			return SelectCount();
		}

		public static List<<#=entity.Name#>> <#=entity.Name#>PageWithTotalCount(int startRowIndex, int maximumRows, string searchText, string sortField, bool sortDirection, out int totalCount, Filters filterList = new Filters(), IEnumerable<string> includeList = null)
		{
			List<<#=entity.Name#>> objects = <#=entity.Name#>Page(startRowIndex, maximumRows, searchText, sortField, sortDirection, filterList, includeList);
			totalCount = m_ItemCount;
			return objects;
		}

		public static List<<#=entity.Name#>> <#=entity.Name#>Page(int startRowIndex, int maximumRows, string searchText, string sortField, bool sortDirection)
		{
			return <#=entity.Name#>Page(startRowIndex, maximumRows, searchText, sortField, sortDirection, new Filters());
		}

		public static List<<#=entity.Name#>> <#=entity.Name#>Page(int startRowIndex, int maximumRows, string searchText, string sortField, bool sortDirection, Filters filterList = new Filters())
		{
			return <#=entity.Name#>Page(startRowIndex, maximumRows, searchText, sortField, sortDirection, filterList, null);
		}

		public static List<<#=entity.Name#>> <#=entity.Name#>Page(int startRowIndex, int maximumRows, string searchText, string sortField, bool sortDirection, Filters filterList = new Filters(), IEnumerable<string> includeList = null)
		{
			sortField = (!string.IsNullOrWhiteSpace(sortField) ? sortField : "<#=entity.KeyMembers[0].Name#>");

			string cachingFilterText = GetCacheFilterText(filterList.GetFilterList(), searchText, includeList);

			List<<#=entity.Name#>> objects;
			string baseKey = cacheKeyPrefix + "<#=entity.Name#>Page_" + cachingFilterText;
			string key = baseKey + "_" + sortField + "_" + sortDirection + "_" + startRowIndex + "_" + maximumRows;
			string countKey = baseKey + "_count";

			List<<#=entity.Name#>> tmpList = null;
			int? tmpInt = null;

			if (Cache.IsEnabled)
			{
				if (Cache.IsEmptyCacheItem(key))
					return new List<<#=entity.Name#>>();
				tmpList = Cache[key] as List<<#=entity.Name#>>;
				tmpInt = Cache[countKey] as int?;
			}

			if (tmpList != null && tmpInt.HasValue)
			{
				objects = tmpList;
				m_ItemCount = tmpInt.Value;
			}
			else
			{
				int pageNumber = maximumRows > 0 ? 1 + startRowIndex / maximumRows : 1;

				using (Entities entity = new Entities())
				{
					IQueryable<<#=entity.Name#>> itemQuery = SetupQuery(entity.<#=entity.Name#>, "<#=entity.Name#>", filterList.GetFilterList(), searchText, m_LikeSearchProperties, sortField, sortDirection, includeList);

					objects = maximumRows <= 0 ? itemQuery.ToList() : itemQuery.Skip(maximumRows * (pageNumber - 1)).Take(maximumRows).ToList();
					m_ItemCount = tmpInt.HasValue ? tmpInt.Value : (maximumRows <= 0 || (pageNumber == 1 && objects.Count < maximumRows) ? objects.Count : itemQuery.Count());
				}

				Cache.Store(key, objects);
				Cache.Store(countKey, m_ItemCount);
			}
			return objects;
		}

		/// <summary>
		/// Clear the cache, if caching is enabled
		/// </summary>
		public static void ClearCache()
		{
			if (Cache.IsEnabled)
				Cache.Purge("<#=GetComponentName(entity) #>_<#=entity.Name#>");
		}

		public partial struct Filters
		{
			private Dictionary<string, object> filterList;
<#=GetFiltersPropertyList(entity)#>
			public Dictionary<string, object> GetFilterList()
			{
				filterList = new Dictionary<string, object>();
				<#=GetFiltersParameterList(entity)#>return filterList;
			}
		}
	}
}<#+   
				}
#>
<#+
private string GetComponentName(EntityType entity)
{
	return (entity.Documentation != null && entity.Documentation.Summary != null ? entity.Documentation.Summary : "GIVE-ME-A-COMPONENT-NAME-" + entity.Name.ToLower());
}

private string GetFilterPropertySpecificGetBy(EntityType entity)
{
	string getBys = string.Empty;

	foreach(EdmProperty prop in entity.Properties.OrderBy(p=>p.Name))
	{
		if(prop.Documentation != null && prop.Documentation.Summary != null && prop.Documentation.Summary.Contains("Filter") && prop.Name.ToLower() != (entity.Name.ToLower() + "id"))
			getBys +=  @"
		public static List<" + entity.Name + "> " + entity.Name + "GetBy" + prop.Name + "(" + prop.TypeUsage.EdmType.Name + (prop.Nullable && prop.TypeUsage.EdmType.Name != "String" ? "?" : "") + " " + prop.Name + @", string sortField = """", bool sortDirection = true, IEnumerable<string> includeList = null)
		{
			Filters filterList = new Filters();
			filterList.Filter" + entity.Name + prop.Name + " = " + prop.Name + @".ToString();
			return " + entity.Name + @"Page(0, 0, string.Empty, sortField, sortDirection, filterList, includeList);
		}
";
	}

	return getBys;
}

private string GetFiltersPropertyList(EntityType entity)
{
	string getBys = string.Empty;
	foreach(EdmProperty prop in entity.Properties.OrderBy(p=>p.Name))
	{
		if(prop.Documentation != null && prop.Documentation.Summary != null && prop.Documentation.Summary.Contains("Filter"))
			getBys += "			public string Filter" + entity.Name + prop.Name + @" { get; set; }
";
	}

	return getBys;
}

private string GetFiltersParameterList(EntityType entity)
{
	string getBys = string.Empty;
	foreach(EdmProperty prop in entity.Properties.OrderBy(p=>p.Name))
	{
		if(prop.Documentation != null && prop.Documentation.Summary != null && prop.Documentation.Summary.Contains("Filter"))
		{
			string propType = prop.TypeUsage.EdmType.Name;
			getBys +=  "if (Filter" + entity.Name + prop.Name + @" != null)
				" + GetFilterConversionByPropType(propType, entity.Name + prop.Name) + @"
				";
		}
	}

	return getBys;
}

private string GetFilterConversionByPropType(string propType, string entityAndPropName)
{
	string filterString = "Filter" + entityAndPropName;
	switch (propType){
		case "Boolean":
		case "Byte":
		case "DateTime":
		case "Int16":
		case "Int32":
		case "Int64":
			return @"{
					if (" + filterString  + @" == string.Empty)
						filterList.Add(""@" + filterString  + @""", string.Empty);
					else
						filterList.Add(""@" + filterString  + @""", Convert.To" + propType + "(" + filterString + @"));
				}";
		case "Guid":
			return @"{
					if (" + filterString  + @" == string.Empty)
						filterList.Add(""@" + filterString  + @""", string.Empty);
					else
						filterList.Add(""@" + filterString  + @""", new " + propType + "(" + filterString + @"));
				}";
		default:
			return @"	filterList.Add(""@" + filterString + @""", " + filterString + ");";
	}
	return filterString;
}

private string GetPropertiesForConstructor(EntityType entity)
{
	string props = string.Empty;
	foreach(EdmProperty prop in entity.Properties.OrderBy(p=>p.Name))
	{
		props +=  "			" + prop.Name + " = objectToCopy." + prop.Name + ";\n";
	}

	return props.TrimEnd('\n').Replace("\n", @"
");
}

private string GetTypeString(EdmProperty prop, bool asNullable)
{
	string typeStr = string.Empty;
	if (prop.TypeUsage.EdmType.Name == "Binary")
		typeStr = "byte[]";
	else
		typeStr = prop.TypeUsage.EdmType.Name;
	if (asNullable && prop.TypeUsage.EdmType.Name != "String" && prop.TypeUsage.EdmType.Name != "Binary")
		typeStr += "?";
	return typeStr;
}

private string GenerateLikeFilters(EntityType entity)
{
	string likeFilters = string.Empty;
	foreach(EdmProperty prop in entity.Properties.OrderBy(p=>p.Name))
	{
		if(prop.Documentation != null && prop.Documentation.Summary != null && prop.Documentation.Summary.Contains("Filter") && prop.TypeUsage.EdmType.Name == "String")//(prop.TypeUsage.EdmType.Name == "String" || (prop.TypeUsage.EdmType.Name == "Int32" && !entity.NavigationProperties.Any(np => np.Name + "ID" == prop.Name))))
			likeFilters +=  "\"" + prop.Name + "\", ";
	}
	likeFilters = likeFilters.Trim().TrimEnd(',').Trim();
	return likeFilters;
}

private string GenerateClientTimeDateProperties(EntityType entity){
	string dateString = string.Empty;
	foreach(EdmProperty prop in entity.Properties.OrderBy(p=>p.Name))
	{
		if (prop.TypeUsage.EdmType.Name == "DateTime")
			if (prop.Nullable)
				dateString += @"
		/// <summary>
		/// Use this when you need to display the date to the user
		/// </summary>
		public virtual DateTime? " + prop.Name + @"ClientTime
		{
			get 
			{
				if (" + prop.Name + @".HasValue)
					return Helpers.ConvertUTCToClientTime(" + prop.Name + @".Value);
				return null;
			}
		}
";
			else
				dateString += @"
		/// <summary>
		/// Use this when you need to display the date to the user
		/// </summary>
		public virtual DateTime " + prop.Name + @"ClientTime
		{
			get { return Helpers.ConvertUTCToClientTime(" + prop.Name + @"); }
		}
";
	}
	return dateString;
}
void SettingsTemplate(string component)
{
#>
using System;
using System.Configuration;
using System.Web.Configuration;
using BaseCode;
using Classes.ConfigurationSettings;

/******************************************************************************/
/*   DO NOT MAKE CHANGES TO THIS FILE.  IT WAS GENERATED BY A CODE GENERATOR. */
/*   ANY CHANGES WILL BE OVERWRITTEN.                                         */
/******************************************************************************/

namespace Classes.<#=component#>
{
	public partial class Settings
	{
		public static string ConnectionStringName
		{
			get { return ConfigurationManager.AppSettings["<#=component#>_connectionStringName"]; }
		}

		public static string ConnectionString
		{
			get
			{
				// Unless a custom connection string is specified, this method will return the connection
				// string from _Settings_ConnectionString.config.
				string connStringName = (string.IsNullOrEmpty(Settings.ConnectionStringName) ? Globals.Settings.DefaultConnectionStringName : Settings.ConnectionStringName);
				return WebConfigurationManager.ConnectionStrings[connStringName].ConnectionString;
			}
		}

		/// <summary>
		/// This should be used by all paging methods done on the frontend to determine page size
		/// </summary>
		public static int FrontEndPageSize
		{
			get
			{   
				if (SiteSettings.GetSettingKeyValuePair().ContainsKey("<#=component#>_frontEndPageSize"))
					return Convert.ToInt32(SiteSettings.GetSettingKeyValuePair()["<#=component#>_frontEndPageSize"]);
				return Globals.Settings.FrontEndPageSize;
			}
		}

		/// <summary>
		/// Turn caching on or off
		/// </summary>
		public static bool EnableCaching
		{
			get 
			{ 
				if (String.IsNullOrEmpty(ConfigurationManager.AppSettings["<#=component#>_enableCaching"]))
					return Globals.Settings.EnableCaching;
				return Convert.ToBoolean(ConfigurationManager.AppSettings["<#=component#>_enableCaching"]); 
			}
		}

		/// <summary>
		/// All database calls will have their results put into cache for this duration
		/// </summary>
		public static int CacheDuration
		{
			get
			{   
				if (String.IsNullOrEmpty(ConfigurationManager.AppSettings["<#=component#>_cacheDuration"]))
					return Globals.Settings.DefaultCacheDuration;
				int duration = Convert.ToInt32(ConfigurationManager.AppSettings["<#=component#>_cacheDuration"]);
				return (duration > 0 ? duration : Globals.Settings.DefaultCacheDuration);
			}
		}
	}
}<#+
}
#>